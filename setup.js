#!/usr/bin/env node

// Setup script to help configure the Notes RAG application
// Run with: node setup.js

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log('üöÄ Notes RAG Application Setup\n');
  
  // Check if .env.local exists
  const envPath = path.join(process.cwd(), '.env.local');
  const envExists = fs.existsSync(envPath);
  
  if (envExists) {
    console.log('üìÑ Found existing .env.local file');
    const overwrite = await question('Do you want to update it? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }
  
  console.log('\nüìù Let\'s configure your environment variables:\n');
  
  // Google AI Configuration
  console.log('1Ô∏è‚É£ Google AI Configuration:');
  const googleApiKey = await question('Enter your Google AI API key: ');
  
  console.log('\nAvailable models:');
  console.log('  a) gemini-1.5-flash (Recommended - fastest, best rate limits)');
  console.log('  b) gemini-1.5-pro (More capable, moderate rate limits)');
  console.log('  c) gemini-2.0-flash-exp (Experimental, may have strict limits)');
  
  const modelChoice = await question('Choose model (a/b/c) [a]: ') || 'a';
  const models = {
    'a': 'gemini-1.5-flash',
    'b': 'gemini-1.5-pro', 
    'c': 'gemini-2.0-flash-exp'
  };
  const selectedModel = models[modelChoice] || 'gemini-1.5-flash';
  
  // Milvus Configuration
  console.log('\n2Ô∏è‚É£ Milvus/Zilliz Cloud Configuration:');
  console.log('For Zilliz Cloud, get the endpoint from your dashboard.');
  console.log('Format: https://your-cluster-id.region.vectordb.zillizcloud.com:19530');
  
  const milvusAddress = await question('Enter Milvus address (or press Enter to skip): ');
  let milvusUsername = '';
  let milvusPassword = '';
  
  if (milvusAddress) {
    milvusUsername = await question('Enter Milvus username: ');
    milvusPassword = await question('Enter Milvus password: ');
  }
  
  // MongoDB Configuration
  console.log('\n3Ô∏è‚É£ MongoDB Configuration:');
  const mongoUri = await question('Enter MongoDB connection string: ');
  
  // JWT Secret
  console.log('\n4Ô∏è‚É£ Security Configuration:');
  const jwtSecret = await question('Enter JWT secret (or press Enter for random): ') || 
                    Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  
  // Create .env.local content
  const envContent = `# Generated by setup script on ${new Date().toISOString()}

# Google AI Configuration
GOOGLE_AI_API_KEY=${googleApiKey}
GOOGLE_EMBEDDING_MODEL=text-embedding-004
GOOGLE_GENERATIVE_MODEL=${selectedModel}

# Milvus/Zilliz Cloud Configuration
${milvusAddress ? `MILVUS_ADDRESS=${milvusAddress}` : '# MILVUS_ADDRESS=your_milvus_endpoint_here'}
${milvusUsername ? `MILVUS_USERNAME=${milvusUsername}` : '# MILVUS_USERNAME=your_username'}
${milvusPassword ? `MILVUS_PASSWORD=${milvusPassword}` : '# MILVUS_PASSWORD=your_password'}

# MongoDB Configuration
MONGODB_URI=${mongoUri}

# JWT Secret for authentication
JWT_SECRET=${jwtSecret}
`;

  // Write the file
  fs.writeFileSync(envPath, envContent);
  
  console.log('\n‚úÖ Configuration saved to .env.local');
  
  // Test the configuration
  console.log('\nüß™ Testing configuration...');
  
  try {
    // Load the new environment
    require('dotenv').config({ path: envPath });
    
    // Test Google AI
    if (process.env.GOOGLE_AI_API_KEY) {
      console.log('‚úÖ Google AI API key configured');
      console.log(`   Model: ${process.env.GOOGLE_GENERATIVE_MODEL}`);
    }
    
    // Test MongoDB
    if (process.env.MONGODB_URI) {
      console.log('‚úÖ MongoDB URI configured');
    }
    
    // Test Milvus
    if (process.env.MILVUS_ADDRESS) {
      console.log('‚úÖ Milvus address configured');
      console.log(`   Address: ${process.env.MILVUS_ADDRESS}`);
    } else {
      console.log('‚ö†Ô∏è  Milvus not configured - vector search will be disabled');
      console.log('   Text search fallback will be used');
    }
    
  } catch (error) {
    console.log('‚ùå Error testing configuration:', error.message);
  }
  
  console.log('\nüéâ Setup complete!');
  console.log('\nNext steps:');
  console.log('1. Run: npm run dev');
  console.log('2. Visit: http://localhost:3000');
  console.log('3. Check health: http://localhost:3000/api/health');
  
  if (!milvusAddress) {
    console.log('\nüí° To enable vector search later:');
    console.log('1. Sign up for Zilliz Cloud (free tier available)');
    console.log('2. Create a cluster and get the endpoint');
    console.log('3. Update MILVUS_* variables in .env.local');
  }
  
  rl.close();
}

main().catch(console.error);
